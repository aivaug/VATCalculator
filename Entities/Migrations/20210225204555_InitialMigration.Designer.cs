// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(VATDBContext))]
    [Migration("20210225204555_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEU")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 47, DateTimeKind.Local).AddTicks(6415),
                            IsDeleted = false,
                            IsEU = true,
                            Name = "Lithuania",
                            VAT = 21m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 51, DateTimeKind.Local).AddTicks(1894),
                            IsDeleted = false,
                            IsEU = false,
                            Name = "Russia",
                            VAT = 20m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 51, DateTimeKind.Local).AddTicks(1943),
                            IsDeleted = false,
                            IsEU = false,
                            Name = "United kingdom",
                            VAT = 20m
                        });
                });

            modelBuilder.Entity("Entities.Models.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVATPayer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 52, DateTimeKind.Local).AddTicks(7449),
                            IsCompany = true,
                            IsDeleted = false,
                            IsVATPayer = true
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 52, DateTimeKind.Local).AddTicks(9529),
                            IsCompany = true,
                            IsDeleted = false,
                            IsVATPayer = true
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 52, DateTimeKind.Local).AddTicks(9546),
                            IsCompany = false,
                            IsDeleted = false,
                            IsVATPayer = true
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            CreatedDate = new DateTime(2021, 2, 25, 22, 45, 55, 52, DateTimeKind.Local).AddTicks(9550),
                            IsCompany = false,
                            IsDeleted = false,
                            IsVATPayer = false
                        });
                });

            modelBuilder.Entity("Entities.Models.Entities.Member", b =>
                {
                    b.HasOne("Entities.Models.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });
#pragma warning restore 612, 618
        }
    }
}
